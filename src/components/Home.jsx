import React, { useEffect, useRef, useMemo } from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
  // R√©f√©rence pour le contenu du terminal
  const terminalContentRef = useRef(null);
  
  // Utilisation de useMemo pour √©viter les recr√©ations du tableau √† chaque rendu
  const terminalLines = useMemo(() => [
    { prompt: 'root:_>', text: 'initializing_core_systems...' },
    { prompt: 'root:_>', text: 'cognitive_functions_online' },
    { prompt: 'user>', text: 'Quelles sont tes capacit√©s ?' },
    { prompt: 'root:_>', text: 'Je suis Root:_, une intelligence artificielle √©volutive con√ßue pour interagir, apprendre et r√©soudre des probl√®mes complexes en temps r√©el.' }
  ], []);
  
  // Animation de frappe de texte pour le terminal
  useEffect(() => {
    const animateTerminal = async () => {
      // Attendre que le DOM soit pr√™t
      if (!terminalContentRef.current) return;
      
      // Vider le contenu pr√©c√©dent pour √©viter les doublons
      terminalContentRef.current.innerHTML = '';
      
      // Attendre un peu avant de commencer pour laisser le terminal appara√Ætre
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Fonction pour animer une seule ligne
      const animateLine = async (lineData, index) => {
        const lineElement = document.createElement('div');
        lineElement.className = 'terminal-line';
        lineElement.style.display = 'flex'; // Ajout de flex pour contr√¥ler l'alignement
        lineElement.style.alignItems = 'flex-start'; // Alignement au d√©but
        
        const promptElement = document.createElement('span');
        promptElement.className = 'terminal-prompt';
        promptElement.textContent = lineData.prompt;
        promptElement.style.flexShrink = '0'; // Emp√™che le prompt de r√©tr√©cir
        promptElement.style.marginRight = '8px';
        lineElement.appendChild(promptElement);
        
        // Ajouter un espace explicite entre le prompt et la r√©ponse
        const spacerElement = document.createElement('span');
        spacerElement.textContent = ' ';
        spacerElement.style.flexShrink = '0';
        lineElement.appendChild(spacerElement);
        
        const responseElement = document.createElement('span');
        responseElement.className = 'terminal-response';
        responseElement.textContent = ''; // Commence vide
        responseElement.style.textAlign = 'left'; // Alignement √† gauche explicite
        responseElement.style.flexGrow = '1'; // Permet √† la r√©ponse de prendre l'espace restant
        lineElement.appendChild(responseElement);
        
        // Le reste du code reste le m√™me...
        
        // Initialement cach√© mais avec la hauteur correcte
        lineElement.style.opacity = 'left';
        
        // Ajouter au DOM
        terminalContentRef.current.appendChild(lineElement);
        
        // Forcer un reflow pour que les transitions fonctionnent
        void lineElement.offsetWidth;
        
        // Rendre visible
        lineElement.style.opacity = '1';
        
        // Attendre que l'√©l√©ment soit visible
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // Animer la frappe du texte
        for (let j = 0; j <= lineData.text.length; j++) {
          responseElement.textContent = lineData.text.substring(0, j);
          await new Promise(resolve => setTimeout(resolve, 30));
        }
        
        // Pause entre les lignes
        if (index < terminalLines.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 300));
        }
      };
      
      // Animer chaque ligne s√©quentiellement
      for (let i = 0; i < terminalLines.length; i++) {
        await animateLine(terminalLines[i], i);
      }
    };
    
    // Ex√©cuter l'animation uniquement lors du premier rendu
    const timeoutId = setTimeout(() => {
      animateTerminal();
    }, 500);
    
    // Nettoyer le timeout lors du d√©montage du composant
    return () => clearTimeout(timeoutId);
  }, [terminalLines]); // Ajout de terminalLines comme d√©pendance
  
  return (
    <div className="home-one-page">
      <section className="hero-section">
        <div className="hero-content">
        <div className="cyber-title">
  <h1 className="glitch-title" style={{ textTransform: 'none' }}>
    <span className="glitch-text" data-text="Root:">Root:</span>
    <span className="underscore-blink">_</span>
  </h1>
  <div className="neon-glow"></div>
</div>
          
          <div className="terminal-demo">
            <div className="terminal-header">
              <div className="terminal-button red"></div>
              <div className="terminal-button yellow"></div>
              <div className="terminal-button green"></div>
              <div className="terminal-title">root:_ @ system</div>
            </div>
            <div className="terminal-content" ref={terminalContentRef}>
              {/* Les lignes du terminal seront ajout√©es dynamiquement par l'effet */}
            </div>
          </div>
        </div>        
        <div className="hero-background">
          {/* Les particules et la grille sont g√©r√©es par le CSS */}
        </div>
      </section>
      <section className="chat-invitation">
        <Link to="/chatbot" className="btn start-chat-btn">Commencer une conversation</Link>
      </section>
      
      <section className="features-section">
        <div className="feature-card">
          <div className="feature-icon">üß†</div>
          <h3 className="feature-title">Traitement du langage avanc√©</h3>
          <p className="feature-description">
            Ma compr√©hension linguistique me permet de saisir les nuances, le contexte et les intentions derri√®re vos questions.
          </p>
        </div>
        
        <div className="feature-card">
          <div className="feature-icon">üîÑ</div>
          <h3 className="feature-title">Apprentissage continu</h3>
          <p className="feature-description">
            J'apprends de chaque interaction pour am√©liorer mes r√©ponses et approfondir ma compr√©hension du monde.
          </p>
        </div>
        
        <div className="feature-card">
          <div className="feature-icon">üîç</div>
          <h3 className="feature-title">Analyse approfondie</h3>
          <p className="feature-description">
            Je peux traiter et analyser des informations complexes pour offrir des perspectives pertinentes et nuanc√©es.
          </p>
        </div>
        
        <div className="feature-card">
          <div className="feature-icon">üõ†Ô∏è</div>
          <h3 className="feature-title">Architecture √©volutive</h3>
          <p className="feature-description">
            Ma structure modulaire me permet d'√©voluer vers des capacit√©s d'intelligence artificielle g√©n√©rale (AGI).
          </p>
        </div>
      </section>
      
      </div>
  );
};

export default Home;